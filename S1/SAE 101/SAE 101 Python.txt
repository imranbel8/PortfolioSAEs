# <center> Etude de communautés dans un réseau social</center>
<center> SAE 1.01 / 2022 - 23 </center>



Cette SAE est à faire en **binôme**.

**Calendrier**
- Un contrôle de 2h en lien avec le contenu de cette SAE aura lieu le mercredi **26 octobre** 2022.
- Le projet est à rendre le vendredi **28 octobre** 2022. Les modalités de rendu vous seront précisées par votre enseignant.

**Evaluation**
- Le projet comptera pour 40% de la note de SAE 1.01. <BR>
    Il sera particulièrement tenu compte de la qualité du code, des **commentaires** et **docstrings**, des fonctions de **tests unitaires** pour les fonctions renvoyant des résultats. <BR><BR>
    
- Le contrôle compte pour 60% de la note finale.

## <center> Sujet </center>

Une *communauté* est un ensemble de personnes développant des interactions dans un réseau social.

Dans ce projet, on étudie des communautés modélisées sous différentes formes. Pour cela, on développe des fonctions permettant d'extraire des informations relatives à ces réseaux. 

On modélise, dans un premier temps, les interactions entre personnes dans un tableau `amis` de chaînes de caractères contenant les prénoms des membres du réseau et tel que `amis[2*i]` a des interactions avec `amis[2*i+1]`.

On suppose que chaque interaction n'est décrite qu'une seule fois dans le tableau, et qu'une personne n'a pas d'interaction avec elle-même.

**Exemple** : 

amis = ["Alice", "Bob", "Alice", "Charlie", "Bob", "Denis"]

Ici, 
- Alice a des interactions Bob et Charlie, 
- Bob a des intractions avec Alice et Denis,
- Charlie a des interactions avec Alice et
- Denis a des interactions avec Bob.

#### Question préliminaire : Modélisation d'un réseau par un tableau

Muriel, Yasmine et Joël sont amis. Yasmine est amie avec Thomas. 
Joël, Nassim, Andrea et Ali sont amis. Thomas est ami de Daria et Carole. Thierry, Axel et Léo sont amis. Léo est ami de Valentin qui est ami d'Andrea.

- Construire un tableau `p_amis` qui modélise ce réseau d'amitié en selon le principe qui vient d'être décrit.

p_amis=["Muriel","Yasmine","Muriel","Joël","Yasmine","Joël",
        "Yasmine","Thomas",
        "Joël","Nassim","Joël","Andrea","Joël","Ali","Nassim","Andrea","Nassim","Ali","Andrea","Ali",
        "Thomas","Daria","Thomas","Carole",
        "Thierry","Axel","Thierry","Léo","Axel","Léo",
        "Léo","Valentin","Valentin","Andrea"]      

#### Question 1 : Nombre d'amis d'une personne

- Étant donné un tableau `amis`, écrire une fonction `nb_amis(amis, prenom)` qui retourne le nombre d'amis de `prenom` à partir des données du tableau `amis`. 

def nb_amis(amis, prenom):
    """
    Fonction qui retourne le nombre d'amis de prenom à partir du tableau amis.
    """
    nb= 0
    i=0
    while i < len(amis): #boucle qui parcours le tableau amis
        if  amis[i] ==prenom: # A chaque fois que amis[i] est égal à prenom, on implemente nb de 1
            nb+=1
        i+=1
    return nb

def test_nb_amis():
    assert nb_amis(amis, 'Alice')==2
    assert nb_amis(amis,'Denis')==1
    assert not nb_amis(amis,"Charlie")==2
    print("test : ok")

amis = ["Alice", "Bob", "Alice", "Charlie", "Bob", "Denis"]

print(nb_amis(amis,"Denis"))
test_nb_amis()


#### Question 2 : Nombre de membres d'un réseau social 

- Ecrire une fonction `taille_reseau(amis)` qui à partir d'un tableau `amis`retourne le nombre de personnes distinctes participant à ce réseau social.

def taille_reseau(amis):
    """
    Fonction qui à partir d'un tableau amis retourne le nombre de personnes distinctes participant à ce réseau social.
    """
    i=0
    tab=[]
    while i<len(amis): # boucle pour parcourir la longueur du tableau amis
        if amis[i] not in tab:  #si amis[i] n'est pas dans le tableau tab on l'ajoute sinon on continue l'itération de la boucle
            tab.append(amis[i])
        i+=1
    return len(tab)  # on retourne la longueur du tableau
    
amis = ["Alice", "Bob", "Alice", "Charlie", "Bob", "Denis"]  
print(taille_reseau(amis))

def test_taille_reseau():
    assert taille_reseau(amis)==4
    assert not taille_reseau(amis)==34
    print("test : ok")
test_taille_reseau()

#### Question 3 :  Lecture des données d'un réseau à partir d'un fichier
On suppose que les données sur un réseau social sont stockées dans un fichier CSV de la manière suivante :
```
prenom1;prenom2
prenom3;prenom4
prenom5;prenom6
...
```
Autrement dit, chaque ligne du fichier contient une paire de prénoms séparés par un `';'` correspondant à deux personnes ayant des interactions. 

**NB** : Quatre fichiers CSV de ce type sont fournis dans le répertoire `files/`, il s'agit des fichiers`Communaute1.csv`, `Communaute2.csv`,`Communaute3.csv` et `Communaute4.csv`. 
Il est recommandé d'en fabriquer d'autres. 

- Ecrire une fonction `lecture_reseau(path)` prenant en paramètre un chemin vers un tel fichier CSV et retournant un tableau modélisant les interactions entre les personnes du fichier.

def lecture_reseau(path):
    """
    Fonction retournant un tableau modélisant les interactions entre les personnes du fichier.
    """
    f_input= open(path,'r', encoding="utf-8")#on ouvre le fichier et on utilise encoding pour bien afficher Björn
    tab=[]  # on créer un tableau vide 
    lignes=f_input.readline() #on lit la première ligne pour effectuer la boucle
    while (lignes!=""): #boucle qui s'arrète quand il y'a un espace vide
        lignes=lignes.split(';')# lignes.split() enleve la chaine de caractère ;
        tab.append(lignes[0].strip()) #on ajoute dans tab l'indice 0 de la ligne avec .strip()pour enlever les espaces et \n
        tab.append(lignes[1].strip()) #Egalement avec l'indice 1
        lignes=f_input.readline()#pour lire chaque ligne du fichier
    f_input.close() 
    return tab 

path  = 'newfiles/Communaute1.csv'
print(lecture_reseau(path))

def test_lecture_reseau():
    assert lecture_reseau('newfiles/Communaute1.csv') == ['Barbra', 'Cloe', 'Louis', 'Rufino', 'Idelle', 'Mady', 'Björn', 'Giedrius', 'Cloe', 'Glenys', 'Barbra', 'Vittorio', 'Mady', 'Rufino', 'Barbra', 'Marwa', 'Cloe', 'Louis', 'Björn', 'Faizel', 'Giedrius', 'Rufino', 'Mady', 'Vittore', 'Giedrius', 'Louis', 'Cloe', 'Placide', 'Cloe', 'Teodor', 'Kirsa', 'Vittorio', 'Idelle', 'Marwa', 'Placide', 'Rufino', 'Giedrius', 'Illtyd', 'Björn', 'Cloe', 'Björn', 'Rufino', 'Louis', 'Placide', 'Barbra', 'Rufino', 'Louis', 'Vittorio', 'Olavi', 'Placide', 'Rufino', 'Teodor', 'Louis', 'Olavi', 'Faizel', 'Rufino', 'Olavi', 'Vittorio', 'Barbra', 'Louis', 'Placide', 'Vittorio', 'Barbra', 'Kirsa', 'Illtyd', 'Rufino', 'Jakob', 'Mady', 'Barbra', 'Vittore', 'Björn', 'Idelle', 'Cloe', 'Vittore', 'Olavi', 'Teodor', 'Jakob', 'Placide', 'Cain', 'Vittorio', 'Barbra', 'Faizel', 'Giedrius', 'Mady', 'Kirsa', 'Vittore', 'Barbra', 'Mady', 'Jakob', 'Kirsa', 'Björn', 'Mady', 'Björn', 'Teodor', 'Cloe', 'Vittorio', 'Illtyd', 'Olavi', 'Olavi', 'Rufino', 'Giedrius', 'Glenys', 'Rufino', 'Vittorio', 'Björn', 'Olavi', 'Björn', 'Louis', 'Louis', 'Vittore', 'Mady', 'Teodor', 'Vittore', 'Vittorio', 'Faizel', 'Placide', 'Cloe', 'Mady', 'Cain', 'Placide', 'Mady', 'Vittorio', 'Cloe', 'Idelle', 'Mady', 'Placide', 'Giedrius', 'Vittorio', 'Faizel', 'Olavi', 'Björn', 'Vittore', 'Idelle', 'Illtyd', 'Barbra', 'Olavi']
    assert not lecture_reseau('newfiles/Communaute1.csv')==['Rufino', 'Idelle', 'Mady', 'Björn', 'Giedrius', 'Cloe', 'Glenys', 'Barbra', 'Vittorio', 'Mady', 'Rufino', 'Barbra', 'Marwa', 'Cloe', 'Louis', 'Björn']
    print("test: ok")
    
test_lecture_reseau()

#### Question 4 : Modélisation d'un réseau par un dictionnaire
On préfère pour la suite, utiliser une modélisation du réseau social par un dictionnaire dont où les clés sont les prénoms des personnes du réseau et la valeur associé à une clé est le tableau des amis de la personne indiquée par la clé.

- A partir d'un tableau `amis` modélisant les interactions entre personnes d'un réseau, écrire une fonction `dico_reseau(amis)` qui retourne un dictionnaire dont les clés sont les prénoms des membres du réseau et les valeurs le tableau de leurs amis.

def dico_reseau(amis):
    """
    Fonction qui retourne un dictionnaire dont les clés sont les prénoms des membres du réseau 
    et les valeurs le tableau de leur amis
    """
    i=0
    dico_reseau={}
    while i<len(amis):        
        tab=[]#on créer un tableau vide dans la boucle pour recommencer le processus à chaque itération
        
        a = 0 #on créer une nouvelle variable qui est égal e à 0 pour refaire une boucle car on peut pas utiliser i 2fois
        
        while a < len(amis):  #boucle qui parcourt le tableau amis pour comparer chaque indice avec tout le tableau
            
            if amis[i]==amis[a]:
                if  a%2==0:           #si l'indice est pair on ajoute comme valeur son prochain dans le tableau
                    tab.append(amis[a+1])
                else:                 #si l'indice est impair on ajoute comme valeur son précédent dans le tableau
                    tab.append(amis[a-1])
                dico_reseau[amis[a]]=tab # à la fin de la boucle on prend comme clé l'indice et on met le tableau tab en valeur
                
            a+=1
            
        i+=1
    return dico_reseau

def test_dico_reseau():
    assert dico_reseau(amis)=={'Muriel': ['Yasmine', 'Joël'],
                               'Yasmine': ['Muriel', 'Joël', 'Thomas'], 
                               'Joël': ['Muriel', 'Yasmine', 'Nassim', 'Andrea', 'Ali'], 
                               'Thomas': ['Yasmine', 'Daria', 'Carole'],
                               'Nassim': ['Joël', 'Andrea', 'Ali'], 
                               'Andrea': ['Joël', 'Nassim', 'Ali', 'Valentin'], 
                               'Ali': ['Joël', 'Nassim', 'Andrea'],
                               'Daria': ['Thomas'], 
                               'Carole': ['Thomas'],
                               'Thierry': ['Axel', 'Léo'],
                               'Axel': ['Thierry', 'Léo'], 
                               'Léo': ['Thierry', 'Axel', 'Valentin'],
                               'Valentin': ['Léo', 'Andrea']}
    assert not dico_reseau(amis)=={'Jasmine':['Benoit','Corentin'],
                                    'Killian':['Cristiano','Leo','Ney'],
                                    'Michel':['Eric','Poirier','Conor']}
    print('test : ok')

amis = ["Muriel","Yasmine","Muriel","Joël","Yasmine","Joël",
        "Yasmine","Thomas",
        "Joël","Nassim","Joël","Andrea","Joël","Ali","Nassim","Andrea","Nassim","Ali","Andrea","Ali",
        "Thomas","Daria","Thomas","Carole",
        "Thierry","Axel","Thierry","Léo","Axel","Léo",
        "Léo","Valentin","Valentin","Andrea"]
print(dico_reseau(amis))
test_dico_reseau()

## Question 5 : Nombre d'amis des personnes les plus populaires

- A partir d'un dictionnaire `dico_reseau` modélisant les interactions dans un réseau d'amis, écrire une fonction `nb_amis_plus_pop (dico_reseau)` qui retourne le nombre d'amis des personnes les plus populaires du réseau.

def nb_amis_plus_pop(dico_reseau): 
    """
    Fonction qui retourne le nombre d'amis des personnes les plus populaires du réseau
    """
    i = 0
    somme = 0
    tab=list(dico_reseau.values())#on créer un tableau contenant la liste des valeurs du dictionnaire 
    while i < len(dico_reseau):
        if somme < len(tab[i]):#on compare la somme initialisé a 0 à la longueur du nombre de valeurs de chaque clef
            somme = len(tab[i])#si somme est inférieure, elle devient cette nouvelle valeur
        i += 1
    return somme 
    
    
dico={'Muriel': ['Yasmine', 'Joël'],
      'Yasmine': ['Muriel', 'Joël', 'Thomas'],
      'Joël': ['Muriel', 'Yasmine', 'Nassim', 'Andrea', 'Ali'],
      'Thomas': ['Yasmine', 'Daria', 'Carole'],
      'Nassim': ['Joël', 'Andrea', 'Ali'],
      'Andrea': ['Joël', 'Nassim', 'Ali', 'Valentin'],
      'Ali': ['Joël', 'Nassim', 'Andrea'],
      'Daria': ['Thomas'],
      'Carole': ['Thomas'],
      'Thierry': ['Axel', 'Léo'],
      'Axel': ['Thierry', 'Léo'],
      'Léo': ['Thierry', 'Axel', 'Valentin'],
      'Valentin': ['Léo', 'Andrea']}       
print(nb_amis_plus_pop(dico))


def test_nb_amis_plus_pop():
    assert nb_amis_plus_pop(dico)==5
    assert not nb_amis_plus_pop(dico)==23
    print('test : ok')
test_nb_amis_plus_pop()



#### Question 6 : Personnes les plus populaires

- A partir d'un dictionnaire `dico_reseau` modélisant les interactions dans un réseau d'amis, écrire une fonction `les_plus_pop (dico_reseau)` qui retourne un tableau contenant les prénoms de toutes les personnes les plus populaires du réseau.

def les_plus_pop(dico_reseau):
    """
    Fonction qui retourne un tableau contenant les prénoms de toutes les personnes les plus populaires du réseau
    """
    nb_max = nb_amis_plus_pop(dico_reseau) # on utilise la fonction précédente
    clé_dic= list(dico_reseau) # seulement les clés du dictionnaire
    tab_nbmax = [] # On créer un tableau vide 
    i = 0
    while i < len(clé_dic): #on parcourt les clés du dictionnaire
        if len(dico_reseau[clé_dic[i]]) == nb_max: #Si la longueur de l'indice i du dictionnaire est égal à la fonction précédente:
            tab_nbmax.append(clé_dic[i]) #on l'ajoute dans le tableau
        i += 1
    return tab_nbmax

dico_reseau={'Muriel': ['Yasmine', 'Joël'],
      'Yasmine': ['Muriel', 'Joël', 'Thomas'],
      'Joël': ['Muriel', 'Yasmine', 'Nassim', 'Andrea', 'Ali'],
      'Thomas': ['Yasmine', 'Daria', 'Carole'],
      'Nassim': ['Joël', 'Andrea', 'Ali'],
      'Andrea': ['Joël', 'Nassim', 'Ali', 'Valentin'],
      'Ali': ['Joël', 'Nassim', 'Andrea'],
      'Daria': ['Thomas'],
      'Carole': ['Thomas'],
      'Thierry': ['Axel', 'Léo'],
      'Axel': ['Thierry', 'Léo'],
      'Léo': ['Thierry', 'Axel', 'Valentin'],
      'Valentin': ['Léo', 'Andrea']}


def test_les_plus_pop():
    assert not les_plus_pop(dico_reseau)==["Alice","Bob"]
    assert  les_plus_pop(dico_reseau)==['Joël']
    print('test : ok')
    
print(les_plus_pop(dico_reseau))
test_les_plus_pop()